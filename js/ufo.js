//import * as THREE from 'three'; // TODO: comment line before rendering

//////////////////////
/* GLOBAL VARIABLES */
//////////////////////

let ufoScene, renderer_ufo;

let camera;
let controls;

let keys = {};

const textures = {
    terrain: "textures/texture.png", moon: "textures/moon.png",
};
let m = {};

let axesHelper;
let isAxesHelperVisible = false;

let ufoBody3D, ufoCockpit3D;

const d = {bodyRadius: 8}

/////////////////////
/* CREATE SCENE(S) */
/////////////////////
function createScene(){
    'use strict';
    ufoScene = new THREE.Scene();
    ufoScene.fog = new THREE.FogExp2(0x656597, 0.00025);

    createAmbientLight(0xffffff, 0.5);

    //createTerrain();
    //createSkydome();
    //createMoon();
    //createCorkTree() ;
    //createHouse();
    //createFlyingSaucer();
}

//////////////////////
/* CREATE CAMERA(S) */
//////////////////////

function createPerspectiveCamera(x, y, z, lx, ly, lz, near, far, fov) {

    const aspect = window.innerWidth / window.innerHeight;
    const camera = new THREE.PerspectiveCamera(fov, aspect, near, far);
    camera.position.set(x, y, z);
    camera.lookAt(lx, ly, lz);
    return camera;
}

function createStereoCamera() {
    /* Fix this, generated by copilot
    const aspect = window.innerWidth / window.innerHeight;
    const camera = new THREE.StereoCamera();
    camera.aspect = aspect;
    camera.setEyeSeparation(0.1);
    camera.focalLength = 1;
    camera.position.set(0, 0, 0);
    camera.lookAt(0, 0, 0);
    return camera;

     */
}


/////////////////////
/* CREATE LIGHT(S) */
/////////////////////

// TODO: remove function, it is just so that we can see what is rendered
function createAmbientLight(color, intensity) {

    const ambientLight = new THREE.AmbientLight(color, intensity);
    ufoScene.add(ambientLight);
    return ambientLight;
}

////////////////////////
/* CREATE OBJECT3D(S) */
////////////////////////

function createObject3D(parent, x = 0, y = 0, z = 0) {

    const obj3D = new THREE.Object3D();
    obj3D.position.set(x, y, z);
    parent.add(obj3D);
    return obj3D;
}

function createMaterials() {

    // Boxes and Cylinders materials
    for (const [name, path] of Object.entries(textures))
        m[name] = new THREE
    // TODO
    // Edges material
    edgesMaterial = new THREE.LineBasicMaterial({ color: colors.black, visible: false });
    boundingBoxesMaterial = new THREE.LineBasicMaterial({ color: colors.red, visible: false });
}

function createGeometry(type, parameters, material, rotAxis, rotAngle, parent, x = 0, y = 0, z = 0) {

    // Create geometry based on the type
    let geometry;
    if (type === 'box')
        geometry = new THREE.BoxGeometry(...parameters);
    else if (type === 'cyl')
        geometry = new THREE.CylinderGeometry(...parameters, 16);
    else if (type === 'sph')
        geometry = new THREE.SphereGeometry(...parameters, 16, 16);
    else if (type === 'sphr') {
        geometry = new THREE.SphereGeometry(...parameters, 16, 12);
        geometry.applyMatrix(new THREE.Matrix4().makeScale(1.0, 1.2, 1.5));
    }
    // Create mesh with the specified material
    const mesh = new THREE.Mesh(geometry, material);
    // Create edges and add them to the mesh and to the edges array
    const edgesGeometry = new THREE.EdgesGeometry(geometry);
    const edges = new THREE.LineSegments(edgesGeometry, edgesMaterial);
    mesh.add(edges);
    // Apply rotation if specified
    if (rotAxis !== null)
        mesh.rotateOnAxis(rotAxis, rotAngle);
    // Set position and add to parent
    mesh.position.set(x, y, z);
    parent.add(mesh);
    return mesh;
}

function createFlyingSaucer() {
    ufoBody3D = createObject3D(ufoScene, 0, 1000, 0);
    createGeometry('sphr', [d.bodyRadius], m.black, null, ufoBody3D);
    ufoCockpit3D = createObject3D(ufoBody3D, 0, 0, 0);
    createGeometry('sph', [d.bodyRadius / 2], m.blue, null, ufoCockpit3D);
}
//////////////////////
/* CHECK COLLISIONS */
//////////////////////
function checkCollisions(){
    'use strict';

}

///////////////////////
/* HANDLE COLLISIONS */
///////////////////////
function handleCollisions(){
    'use strict';

}

////////////
/* UPDATE */
////////////
function update(){
    'use strict';

}

/////////////
/* DISPLAY */
/////////////
function render() {
    renderer_ufo.render(ufoScene, camera);
}

////////////////////////////////
/* INITIALIZE ANIMATION CYCLE */
////////////////////////////////
function init() {
    'use strict';

}

/////////////////////
/* ANIMATION CYCLE */
/////////////////////
function animate() {
    'use strict';

}

////////////////////////////
/* RESIZE WINDOW CALLBACK */
////////////////////////////
function onResize() {
    'use strict';

}

///////////////////////
/* KEY DOWN CALLBACK */
///////////////////////
function onKeyDown(e) {
    'use strict';

}

///////////////////////
/* KEY UP CALLBACK */
///////////////////////
function onKeyUp(e){
    'use strict';

}